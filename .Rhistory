colnames(ssa_exp_tips_df) <- colnames(ssa_spt_tips_df)
ssa_exp_tips_df <- as.data.frame(t(ssa_expected_tips))
colnames(ssa_exp_tips_df) <- colnames(ssa_spt_tips_df)
ssa_exp_tidy_df <- tidyr::gather(ssa_exp_tips_df)
library(ggplot2)
library(khroma)
ggplot2::ggplot(data = ssa_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ssa_exp_tips_df,
x = key,
y = value, col = "yellow") +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Speciation rate") +
ggplot2::ylab("Number of leaves") +
library(khroma)
ggplot2::ggplot(data = ssa_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ssa_exp_tips_df,
x = key,
y = value, col = "yellow") +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Speciation rate") +
ggplot2::ylab("Number of leaves") +
library(khroma)
ggplot2::ggplot(data = ssa_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ssa_exp_tips_df,
x = key,
y = value, col = "yellow") +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Speciation rate") +
ggplot2::ylab("Number of leaves")
ggplot2::ggplot(data = ssa_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ssa_exp_tidy_df,
x = key,
y = value, col = "yellow") +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Speciation rate") +
ggplot2::ylab("Number of leaves")
ggplot2::ggplot(data = ssa_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ssa_exp_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "yellow")) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Speciation rate") +
ggplot2::ylab("Number of leaves")
library(khroma)
ggplot2::ggplot(data = ssa_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ssa_exp_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "yellow")) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Speciation rate") +
ggplot2::ylab("Number of leaves") +
guides(col=FALSE)
gbr <- seq(from = 1, to = 10) / 10
gdr <- gbr / 2
loctr_tips <- locus_tree_test(gbr, gdr, sim_time, reps)
loct_expected_tips <- vector(length = length(gbr))
for(i in seq_len(length(gbr))) {
loct_expected_tips[i] <- treeducken::calculate_expected_leaves_locustree(
t = sim_time,
dup_rate = gbr[i],
loss_rate = gdr[i],
num_species = loctr_tips[reps + 1, i])
}
loctr_tips <- locus_tree_test(gbr, gdr, sim_time, reps)
gbr <- seq(from = 1, to = 10) / 10
gdr <- gbr / 2
loctr_tips <- locus_tree_test(gbr, gdr, sim_time, reps)
loct_expected_tips <- vector(length = length(gbr))
for(i in seq_len(length(gbr))) {
loct_expected_tips[i] <- treeducken::calculate_expected_leaves_locustree(
t = sim_time,
dup_rate = gbr[i],
loss_rate = gdr[i],
num_species = loctr_tips[reps + 1, i])
}
loctr_tips_df <- as.data.frame(loctr_tips)
loc_column_namer <- function(spec_rate) {
paste("delta=", spec_rate)
}
colnames(loctr_tips_df) <- loc_column_namer(sbr)
loctr_tips_tidy_df <- tidyr::gather(loctr_tips_df)
loct_expected_tips_df <- as.data.frame(t(loct_expected_tips))
colnames(loct_expected_tips_df) <- colnames(loctr_tips_df)
loct_expected_tidy_df <- tidyr::gather(loct_expected_tips_df)
library(ggplot2)
library(khroma)
ggplot2::ggplot(data = loctr_tips_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = loct_expected_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "red")) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Gene Birte Rate") +
ggplot2::ylab("Number of leaves") +
guides(col=FALSE)
# make into dataframe
# name columns
# plot
gbr <- seq(from = 1, to = 10) / 10
gdr <- gbr / 2
loctr_tips <- locus_tree_test(gbr, gdr, sim_time, reps)
loct_expected_tips <- vector(length = length(gbr))
for(i in seq_len(length(gbr))) {
loct_expected_tips[i] <- treeducken::calculate_expected_leaves_locustree(
t = sim_time,
dup_rate = gbr[i],
loss_rate = gdr[i],
num_species = loctr_tips[reps + 1, i])
}
loctr_tips_df <- as.data.frame(loctr_tips)
loc_column_namer <- function(gbr) {
paste("delta=", gbr)
}
colnames(loctr_tips_df) <- loc_column_namer(gbr)
loctr_tips_tidy_df <- tidyr::gather(loctr_tips_df)
loct_expected_tips_df <- as.data.frame(t(loct_expected_tips))
colnames(loct_expected_tips_df) <- colnames(loctr_tips_df)
loct_expected_tidy_df <- tidyr::gather(loct_expected_tips_df)
library(ggplot2)
library(khroma)
ggplot2::ggplot(data = loctr_tips_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = loct_expected_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "red")) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Gene Birte Rate") +
ggplot2::ylab("Number of leaves") +
guides(col=FALSE)
# make into dataframe
# name columns
# plot
ggplot2::ggplot(data = ssa_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ssa_exp_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "red",
size = 0.5)) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Speciation rate") +
ggplot2::ylab("Number of leaves") +
guides(col=FALSE)
ggplot2::ggplot(data = ssa_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ssa_exp_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "red",
size = 0.5)) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Speciation rate") +
ggplot2::ylab("Number of leaves") +
guides(col=FALSE, size=FALSE)
ggplot2::ggplot(data = loctr_tips_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = loct_expected_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "red",
size = 0.5)) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Gene Birte Rate") +
ggplot2::ylab("Number of leaves") +
guides(col=FALSE, size = FALSE)
library(ggplot2)
library(khroma)
ggplot2::ggplot(data = ht_test_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ht_expected_tips_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "red",
size = 0.5)) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Host speciation rate") +
ggplot2::ylab("Number of leaves") +
guides(col=FALSE, size=FALSE)
lambda_h <- seq(from = 1, to = 10) / 2
lambda_c <- 2.5
mu_h <- (lambda_h + lambda_c) / 2
ht_test_tips <- host_tree_test(hbr = lambda_h,
hdr = mu_h,
cosp_rate = lambda_c,
reps = reps,
time = sim_time)
lambda_h <- seq(from = 1, to = 10) / 2
lambda_c <- 2.5
mu_h <- (lambda_h + lambda_c) / 2
ht_test_tips <- host_tree_test(hbr = lambda_h,
hdr = mu_h,
cosp_rate = lambda_c,
reps = reps,
time = sim_time)
lambda_c <- 1
lambda_s <- rep(seq(from = 1, to = 3), times = 3)
mu_s <- lambda_s / 4
symbt_test_tips <- symb_tree_test(cosp_rate = lambda_c,
sbr = lambda_s,
sdr = mu_s,
reps = reps,
time = sim_time)
library(treeduckenValidation)
library(treeducken)
library(treeduckenValidation)
lambda_h <- seq(from = 1, to = 10) / 2
lambda_c <- 2.5
mu_h <- (lambda_h + lambda_c) / 2
ht_test_tips <- host_tree_test(hbr = lambda_h,
hdr = mu_h,
cosp_rate = lambda_c,
reps = reps,
time = sim_time)
View(host_tree_pairs)
treeducken::host_tree.multiCophy(host_tree_pairs)
treeducken::host_tree.multiCophy(host_tree_pairs)
h_trees <- treeducken::host_tree.multiCophy(host_tree_pairs)
h_trees
h_trees["tip.label"]
h_trees["tip.label"]
h_trees[tip.label]
h_trees$tip.label
h_trees
h_trees <- treeducken::host_tree(host_tree_pairs)
host_tree_pairs
host_tree_pairs[[1]]
host_tree_pairs
unlist(host_tree_pairs)
?unlist
unlist(host_tree_pairs, recursive = FALSE)
test<- unlist(host_tree_pairs, recursive = FALSE)
test$host_tree
test["host_tree"]
test[[1]]
test[1]
test <- t(test)
test
aggr_test <- by(test, INDICES = row.names(test))
test
View(test)
test<- unlist(host_tree_pairs, recursive = FALSE)
test
View(test)
test[[x == "host_tree"]]
which(test == "host_tree")
which(colnames(test) == "host_tree")
lapply(test, function (x) `[`('host_tree')])
lapply(test, function (x) `[`, 'host_tree')
lapply(test, function (x) `[`, ('host_tree')])
lapply(test, function (x) `[`, ('host_tree'))
lapply(test, function (x) `[`('host_tree')])
lapply(test, `[`, c('host_tree', 'symb_tree'))
test <- as.data.frame(test)
lapply(test, function (x) `[`('host_tree')])
host_tree_pairs
host_tree_pairs
View(host_tree_num_tips)
t2 <-unlist(test, recursive = FALSE)
t2
lapply(t2, function (x) `[`('host_tree')])
t2[[
"host_tree"]]
]]
t2["host_tree"]
t2[["host_tree"]]
t2
t1[1]
t2[1]
t2[.1]
t2[,1]
t2[]1
t2[[1]]
test[[1]]
seq(from=1, to = length(test), by = 4)
test[seq(from=1, to = length(test), by = 4)]
host_trees <-test[seq(from=1, to = length(test), by = 4)]
host_trees
ape::Ntip.multiPhylo(host_trees)
library(treeducken)
lambda_h <- seq(from = 1, to = 10) / 2
lambda_c <- 2.5
mu_h <- (lambda_h + lambda_c) / 2
ht_test_tips <- host_tree_test(hbr = lambda_h,
hdr = mu_h,
cosp_rate = lambda_c,
reps = reps,
time = sim_time)
library(treeduckenValidation)
host_tree_pairs <- treeducken::sim_cophylo_bdp(hbr = rates_vec[i, 1],
hdr = rates_vec[i, 2],
cosp_rate = cosp_rate,
sbr = 1.0,
sdr = 0.5,
host_exp_rate = 0.0,
numbsim = reps,
time_to_sim = time)
library(treeducken)
library(treeduckenValidation)
lambda_h <- seq(from = 1, to = 10) / 2
lambda_c <- 2.5
mu_h <- (lambda_h + lambda_c) / 2
ht_test_tips <- host_tree_test(hbr = lambda_h,
hdr = mu_h,
cosp_rate = lambda_c,
reps = reps,
time = sim_time)
lambda_h <- seq(from = 1, to = 10) / 2
lambda_c <- 2.5
mu_h <- (lambda_h + lambda_c) / 2
ht_test_tips <- host_tree_test(hbr = lambda_h,
hdr = mu_h,
cosp_rate = lambda_c,
reps = reps,
time = sim_time)
ht_expected_tips <- vector(length = length(lambda_h))
for(i in seq_len(length(lambda_h))) {
ht_expected_tips <- treeducken::calculate_expected_leaves_sptree(
lamba = lambda_c + lambda_h[i],
mu = mu_h[i],
time = sim_time)
}
lambda_h <- seq(from = 1, to = 10) / 2
lambda_c <- 2.5
mu_h <- (lambda_h + lambda_c) / 2
ht_test_tips <- host_tree_test(hbr = lambda_h,
hdr = mu_h,
cosp_rate = lambda_c,
reps = reps,
time = sim_time)
library(treeduckenValidation)
library(treeduckenValidation)
library(ggplot2)
library(khroma)
# first decide on parameters
sbr <- seq(from= 1, to = 6)
sdr <- sbr / 4
num_tips <- 50
reps <- 10
# run the main function
gsa_spt_nds <- treeduckenValidation::gsa_test_data_generation(sbr,
sdr,
num_tips,
reps = reps)
plot_df <- format_gsa_test_df(gsa_spt_nds, sbr)
ggplot2::ggplot(data = plot_df,
ggplot2::aes(x = key, y = value, fill = simulator)) +
ggplot2::geom_boxplot() +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Speciation rate") +
ggplot2::ylab("Tree depth")
sim_time <- 1.0
ssa_spt_tips <- ssa_test_data_generation(sbr,
sdr,
time = sim_time,
reps = reps)
ssa_tidy_df <- format_ssa_test(ssa_spt_tips, sbr)
ssa_exp_tidy_df <- get_ssa_expected_values(sbr,
sdr,
sim_time,
ssa_tidy_df)
ggplot2::ggplot(data = ssa_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ssa_exp_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "red",
size = 0.5)) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Speciation rate") +
ggplot2::ylab("Number of leaves") +
guides(col=FALSE, size=FALSE)
gbr <- seq(from = 1, to = 10) / 5
gdr <- gbr / 2
loctr_tips <- locus_tree_test(gbr, gdr, 2, reps)
loctr_tips_tidy_df <- format_loctree_test(loctr_tips, gbr)
loct_expected_tidy_df <- get_loctr_expected_values(gbr,
gdr,
num_tips,
loctr_tips,
loctr_tips_tidy_df)
ggplot2::ggplot(data = loctr_tips_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = loct_expected_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "red",
size = 0.5)) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Gene Birte Rate") +
ggplot2::ylab("Number of leaves") +
guides(col=FALSE, size = FALSE)
# make into dataframe
# name columns
# plot
lambda_h <- seq(from = 1, to = 10) / 10
lambda_c <- 1.0
mu_h <- (lambda_h + lambda_c) / 2
ht_test_tips <- host_tree_test(hbr = lambda_h,
hdr = mu_h,
cosp_rate = lambda_c,
reps = reps,
time = sim_time)
ht_test_tidy_df <- format_host_test_data(ht_test_tips)
lambda_h <- seq(from = 1, to = 10) / 10
lambda_c <- 1.0
mu_h <- (lambda_h + lambda_c) / 2
ht_test_tips <- host_tree_test(hbr = lambda_h,
hdr = mu_h,
cosp_rate = lambda_c,
reps = reps,
time = sim_time)
ht_test_tidy_df <- format_host_test_data(ht_test_tips, lambda_h)
ht_expected_tips_tidy_df <- get_host_expected_values(lambda_h,
lambda_c,
mu_h,
sim_time,
ht_test_tidy_df)
library(ggplot2)
library(khroma)
ggplot2::ggplot(data = ht_test_tidy_df,
ggplot2::aes(x = key, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::geom_point(data = ht_expected_tips_tidy_df,
ggplot2::aes(x = key,
y = value,
col = "red",
size = 0.5)) +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Host speciation rate") +
ggplot2::ylab("Number of leaves") +
guides(col=FALSE, size=FALSE)
lambda_c <- 0.5
lambda_s <- seq(from = 1, to = 3) / 1.0
mu_s <- lambda_s / 4
symbt_test_tips <- symb_tree_test(cosp_rate = lambda_c,
sbr = lambda_s,
sdr = mu_s,
reps = reps,
time = sim_time)
symbt_expected_tips <- matrix(nrow = reps, ncol = length(lambda_s))
for(i in seq_len(length(lambda_s))) {
for(j in 1:reps) {
symbt_expected_tips[j, i] <- treeducken::calculate_expected_leaves_locustree(
t = sim_time,
dup_rate = lambda_s[i],
loss_rate = mu_s[i],
num_species = symbt_test_tips[j, i + length(lambda_s)])
if(is.infinite(symbt_expected_tips[j, i]))
symbt_expected_tips[j, i] <- NA
}
}
symbt_test_tips_df <- as.data.frame(symbt_test_tips[,1:length(lambda_s)])
symbt_column_namer <- function(lambda_s) {
paste("lambda_s=", lambda_s)
}
colnames(symbt_test_tips_df) <- symbt_column_namer(lambda_s)
symbt_test_tips_tidy_df <- tidyr::gather(symbt_test_tips_df)
symbt_test_tips_tidy_df$type <- rep("observed", times = nrow(symbt_test_tips_tidy_df))
symbt_expected_tips_df <- as.data.frame(symbt_expected_tips)
colnames(symbt_expected_tips_df) <- colnames(symbt_test_tips_df)
symbt_expected_tips_df <- tidyr::gather(symbt_expected_tips_df)
symbt_expected_tips_df$type <- rep("expected", times = nrow(symbt_expected_tips_df))
symbt_plot_df <- rbind(symbt_test_tips_tidy_df, symbt_expected_tips_df)
library(ggplot2)
library(khroma)
ggplot2::ggplot(data = symbt_plot_df,
ggplot2::aes(x = key, y = value, fill = type)) +
ggplot2::geom_boxplot() +
ggplot2::theme_bw() +
khroma::scale_fill_bright() +
ggplot2::xlab("Symbiont speciation rate") +
ggplot2::ylab("Number of leaves")
